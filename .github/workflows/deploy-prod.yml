name: CI & Deploy (prod)

on:
  push:
    branches: [ "main" ]
    tags:     [ "v*" ]

concurrency:
  group: deploy-prod-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/arzamaskov/42k-app
  DOCKER_BUILDKIT: "1"

jobs:
  test:
    name: PHP tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, intl, redis, pdo_pgsql
      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-
      - name: Composer install
        run: composer install --no-interaction --no-progress --prefer-dist
      - name: App key for tests
        run: |
          [ -f .env ] || cp .env.example .env
          php artisan key:generate
      - name: PHPUnit
        run: vendor/bin/phpunit --colors=always

  build:
    name: Build & Push images (app & web)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      # APP (php-fpm) из target=prod одного Dockerfile
      - name: Build & push APP image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ops/php/Dockerfile
          target: prod
          push: true
          cache-from: type=gha,scope=app
          cache-to: type=gha,mode=max,scope=app
          tags: |
            ghcr.io/arzamaskov/42k-app:app-${{ github.sha }}
            ghcr.io/arzamaskov/42k-app:app-latest

      # WEB (nginx) из target=web того же Dockerfile
      - name: Build & push WEB image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ops/php/Dockerfile
          target: web
          push: true
          cache-from: type=gha,scope=web
          cache-to: type=gha,mode=max,scope=web
          tags: |
            ghcr.io/arzamaskov/42k-app:web-${{ github.sha }}
            ghcr.io/arzamaskov/42k-app:web-latest

  deploy:
    name: Deploy to PROD
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 20
    steps:
      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.2
        with:
          host:     ${{ secrets.PROD_SSH_HOST }}
          port:     ${{ secrets.PROD_SSH_PORT }}
          username: ${{ secrets.PROD_SSH_USER }}
          key:      ${{ secrets.PROD_SSH_KEY }}
          script_stop: true
          envs: GITHUB_SHA
          script: |
            set -e
            cd /opt/42k
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
            export APP_TAG="${GITHUB_SHA}"
            export WEB_TAG="${GITHUB_SHA}"
            APP_TAG="$APP_TAG" WEB_TAG="$WEB_TAG" docker compose -f docker-compose.prod.yml pull
            APP_TAG="$APP_TAG" WEB_TAG="$WEB_TAG" docker compose -f docker-compose.prod.yml up -d
            docker compose -f docker-compose.prod.yml exec -T app php artisan down || true
            docker compose -f docker-compose.prod.yml exec -T app php artisan migrate --force
            docker compose -f docker-compose.prod.yml exec -T app php artisan config:cache
            docker compose -f docker-compose.prod.yml exec -T app php artisan route:cache
            docker compose -f docker-compose.prod.yml exec -T app php artisan event:cache
            docker compose -f docker-compose.prod.yml exec -T app php artisan storage:link || true
            docker compose -f docker-compose.prod.yml exec -T app php artisan up
            docker image prune -f

